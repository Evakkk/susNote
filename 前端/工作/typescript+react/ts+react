

# TypeScript

###起步

==在TypeScript里，只在两个类型内部的结构兼容那么这两个类型就是兼容的。==

#### 类型注解

TypeScript里的类型注解是一种轻量级的为函数或变量添加约束的方式。 

![image-20210203092643592](../../笔记/image/image-20210203092643592.png)

#### 接口

[参考文档](https://blog.csdn.net/bobo553443/article/details/79870647)

==接口在JavaScript里没有对应的类型与之对应，所以编译之后不会生成任何JavaScript代码。==

没有对应的类型！！

![image-20210203094144307](../../笔记/image/image-20210203094144307.png)

##### 接口继承类

![image-20210203095332420](../../笔记/image/image-20210203095332420.png)

##### 接口与类

![image-20210203095818737](../../笔记/image/image-20210203095818737.png)

##### 接口为什么能继承类

![image-20210203100237558](../../笔记/image/image-20210203100237558.png)

![image-20210203100933172](../../笔记/image/image-20210203100933172.png)

![image-20210203101501535](../../笔记/image/image-20210203101501535.png)

#### 类

![image-20210203102353821](../../笔记/image/image-20210203102353821.png)

### 基本语法

#### 1. 基础类型

```js
# 布尔值
let isDone: boolean = false;

# 数字
let decLiteral: number = 6;
let hexLiteral: number = 0xf00d;		//十六进制
let binaryLiteral: number = 0b1010;		//二进制
let octalLiteral: number = 0o744;		//八进制

# 字符串
let name: string = "bob";				//单引号双引号都可

# 数组
let list: number[] = [1, 2, 3];			//元素类型后面接上 []
let list: Array<number> = [1, 2, 3];	//使用数组泛型，Array<元素类型>

# 元组 Tuple
let x: [string, number];
x = ['hello', 10]; // OK
x = [10, 'hello']; // Error

# 枚举 
enum Color {Red, Green, Blue}			//使用枚举类型可以为一组数值赋予友好的名字
let c: Color = Color.Green;

# any
//使用 any类型来标记这些变量：不对这些值进行检查而是直接让它们通过编译阶段的检查
let notSure: any = 4;
notSure = "maybe a string instead";
notSure = false; // okay, definitely a boolean

# void
function warnUser(): void {
    console.log("This is my warning message");
}
声明一个void类型的变量没有什么大用，因为你只能为它赋予undefined和null：
let unusable: void = undefined;

# Null 和 Undefined
默认情况下null和undefined是所有类型的子类型。
就是说你可以把 null和undefined赋值给number类型的变量。

# 类型断言
//类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。
let someValue: any = "this is a string";
let strLength: number = (<string>someValue).length;		//尖括号表示

let strLength: number = (someValue as string).length;	//as表示
```

在对现有代码进行改写的时候，`any`类型是十分有用的，它允许你在编译时可选择地包含或移除类型检查。 你可能认为 `Object`有相似的作用，就像它在其它语言中那样。 但是 `Object`类型的变量只是允许你给它赋任意值 - 但是却不能够在它上面调用任意的方法，即便它真的有这些方法。

[参考文档](https://www.tslang.cn/docs/handbook/basic-types.html)

# react

### 命名

* 组件：大写开头
* 事件：小驼峰式（camelCase）

### 一、jsx

```jsx
const element = <h1>Hello, world!</h1>;
```

它被称为 JSX，是一个 JavaScript 的语法扩展。



为了便于阅读，我们会将 JSX 拆分为多行。同时，我们建议将内容包裹在括号中，虽然这样做不是强制要求的，但是这可以避免遇到[自动插入分号](http://stackoverflow.com/q/2846283)陷阱。

```jsx
const element = (
	<h1>
    	hello,world!
    </h1>
)
```

#### JSX 也是一个表达式

在编译之后，JSX 表达式会被转为普通 JavaScript 函数调用，并且对其取值后得到 JavaScript 对象。

也就是说，你可以在 `if` 语句和 `for` 循环的代码块中使用 JSX，将 JSX 赋值给变量，把 JSX 当作参数传入，以及从函数中返回 JSX：

```jsx
function getGreeting(user) {
  if (user) {
    return <h1>Hello, {formatName(user)}!</h1>;
  }
  return <h1>Hello, Stranger.</h1>;
}
```

#### JSX 特定属性

你可以通过使用引号，来将属性值指定为字符串字面量：

```jsx
const element = <div tabIndex="0"></div>;
```

也可以使用大括号，来在属性值中插入一个 JavaScript 表达式：

```jsx
const element = <img src={user.avatarUrl}></img>;
```

在属性中嵌入 JavaScript 表达式时，不要在大括号外面加上引号。你应该仅使用引号（对于字符串值）或大括号（对于表达式）中的一个，对于同一属性不能同时使用这两种符号。

#### JSX 防止注入攻击

你可以安全地在 JSX 当中插入用户输入内容：

```
const title = response.potentiallyMaliciousInput;
// 直接使用是安全的：
const element = <h1>{title}</h1>;
```

React DOM 在渲染所有输入内容之前，默认会进行[转义](https://stackoverflow.com/questions/7381974/which-characters-need-to-be-escaped-on-html)。它可以确保在你的应用中，永远不会注入那些并非自己明确编写的内容。所有的内容在渲染之前都被转换成了字符串。这样可以有效地防止 [XSS（cross-site-scripting, 跨站脚本）](https://en.wikipedia.org/wiki/Cross-site_scripting)攻击。

#### JSX 表示对象

Babel 会把 JSX 转译成一个名为 `React.createElement()` 函数调用。

以下两种示例代码完全等效：

```
const element = (
  <h1 className="greeting">
    Hello, world!
  </h1>
);
const element = React.createElement(
  'h1',
  {className: 'greeting'},
  'Hello, world!'
);
```

`React.createElement()` 会预先执行一些检查，以帮助你编写无错代码，但实际上它创建了一个这样的对象：

```
// 注意：这是简化过的结构
const element = {
  type: 'h1',
  props: {
    className: 'greeting',
    children: 'Hello, world!'
  }
};
```

这些对象被称为 “React 元素”。它们描述了你希望在屏幕上看到的内容。React 通过读取这些对象，然后使用它们来构建 DOM 以及保持随时更新。



### 二、元素渲染

​	**将react元素渲染成DOM**

​	元素是构成 React 应用的最小砖块。



想要将一个 React 元素渲染到根 DOM 节点中，只需把它们一起传入 [`ReactDOM.render()`](https://react.docschina.org/docs/react-dom.html#render)：

```jsx
const element = <h1>Hello, world</h1>;
ReactDOM.render(element, document.getElementById('root'));
```

#### 更新已渲染的元素

React 元素是[不可变对象](https://en.wikipedia.org/wiki/Immutable_object)。一旦被创建，你就无法更改它的子元素或者属性。一个元素就像电影的单帧：它代表了某个特定时刻的 UI。

根据我们已有的知识，更新 UI 唯一的方式是创建一个全新的元素，并将其传入 [`ReactDOM.render()`](https://react.docschina.org/docs/react-dom.html#render)。

考虑一个计时器的例子：

```jsx
function tick() {
  const element = (
    <div>
      <h1>Hello, world!</h1>
      <h2>It is {new Date().toLocaleTimeString()}.</h2>
    </div>
  );
  ReactDOM.render(element, document.getElementById('root'));
}

setInterval(tick, 1000);
//每次都ReactDOM.render(),but....
```

![image-20210203151900437](../../笔记/image/image-20210203151900437.png)

#### React 只更新它需要更新的部分

React DOM 会将元素和它的子元素与它们之前的状态进行比较，并只会进行必要的更新来使 DOM 达到预期的状态。

![DOM inspector showing granular updates](../../笔记/image/granular-dom-updates.gif)

尽管每一秒我们都会新建一个描述整个 UI 树的元素，React DOM 只会更新实际改变了的内容，也就是例子中的文本节点。



### 三、组件 & props

组件，从概念上类似于 JavaScript 函数。它接受任意的入参（即 “props”），并返回用于描述页面展示内容的 React 元素。

==props是只读的==

#### 函数组件与 class 组件

定义组件最简单的方式就是编写 JavaScript 函数：

```jsx
function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}
```

该函数是一个有效的 React 组件，因为它接收唯一带有数据的 “props”（代表属性）对象与并返回一个 React 元素。这类组件被称为“函数组件”，因为它本质上就是 JavaScript 函数。

你同时还可以使用 [ES6 的 class](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes) 来定义组件：

```jsx
class Welcome extends React.Component {
  render() {
    return <h1>Hello, {this.props.name}</h1>;
  }
}
```

上述两个组件在 React 里是等效的。

#### 渲染组件

之前，我们遇到的 React 元素都只是 DOM 标签：

```jsx
const element = <div />;
```

不过，React 元素也可以是用户自定义的组件：

```jsx
const element = <Welcome name="Sara" />;
```

当 React 元素为用户自定义组件时，它会将 JSX 所接收的属性（attributes）以及子组件（children）转换为单个对象传递给组件，这个对象被称之为 “props”。

例如，这段代码会在页面上渲染 “Hello, Sara”：

```jsx
function Welcome(props) {  return <h1>Hello, {props.name}</h1>;
}

const element = <Welcome name="Sara" />;ReactDOM.render(
  element,
  document.getElementById('root')
);
```

让我们来回顾一下这个例子中发生了什么：

1. 我们调用 `ReactDOM.render()` 函数，并传入 `<Welcome name="Sara" />` 作为参数。
2. React 调用 `Welcome` 组件，并将 `{name: 'Sara'}` 作为 props 传入。
3. `Welcome` 组件将 `<h1>Hello, Sara</h1>` 元素作为返回值。
4. React DOM 将 DOM 高效地更新为 `<h1>Hello, Sara</h1>`。

![image-20210203153413859](../../笔记/image/image-20210203153413859.png)

#### 组合组件

组件可以在其输出中引用其他组件。

```jsx
function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}

function App() {
  return (
    <div>
      <Welcome name="Sara" />      
      <Welcome name="Cahal" />      
      <Welcome name="Edite" />   
    </div>
  );
}

ReactDOM.render(
  <App />,
  document.getElementById('root')
);
```

#### 提取组件

将组件拆分为更小的组件。

例如，参考如下 `Comment` 组件：

```jsx
function Comment(props) {
  return (
    <div className="Comment">
      <div className="UserInfo">
        <img className="Avatar"
          src={props.author.avatarUrl}
          alt={props.author.name}
        />
        <div className="UserInfo-name">
          {props.author.name}
        </div>
      </div>
      <div className="Comment-text">
        {props.text}
      </div>
      <div className="Comment-date">
        {formatDate(props.date)}
      </div>
    </div>
  );
}
```

该组件由于嵌套的关系，变得难以维护，且很难复用它的各个部分。因此，让我们从中提取一些组件出来。

首先，我们将提取 `Avatar` 组件：

```jsx
function Avatar(props) {
  return (
    <img className="Avatar"   
        src={props.user.avatarUrl} 
        alt={props.user.name}    
     /> 
  );
}
```

#### Props 的只读性

组件无论是使用[函数声明还是通过 class 声明](https://react.docschina.org/docs/components-and-props.html#function-and-class-components)，都决不能修改自身的 props。来看下这个 `sum` 函数：

```jsx
function sum(a, b) {
  return a + b;
}jsx
```

这样的函数被称为[“纯函数”](https://en.wikipedia.org/wiki/Pure_function)，因为该函数不会尝试更改入参，且多次调用下相同的入参始终返回相同的结果。

相反，下面这个函数则不是纯函数，因为它更改了自己的入参：

```jsx
function withdraw(account, amount) {
  account.total -= amount;
}
```

**所有 React 组件都必须像纯函数一样保护它们的 props 不被更改。**

当然，应用程序的 UI 是动态的，并会伴随着时间的推移而变化。在[下一章节](https://react.docschina.org/docs/state-and-lifecycle.html)中，我们将介绍一种新的概念，称之为 “state”。在不违反上述规则的情况下，state 允许 React 组件随用户操作、网络响应或者其他变化而动态更改输出内容。

### 四、State & 生命周期

在[元素渲染](https://react.docschina.org/docs/rendering-elements.html#rendering-an-element-into-the-dom)章节中，我们只了解了**一种更新** UI 界面的方法。通过调用 `ReactDOM.render()` 来修改我们想要渲染的元素：

#### 封装真正可复用的 `Clock` 组件

* **原始**：是通过每次用定时器调用，但是我们要的是一个clock组件需要设置一个计时器
  * setInterval  每次ReactDOM.render
  * 传入date
  * props接收显示date
* **封装**：

##### 原始版本

从封装时钟的外观开始：

```jsx
#1.0
function Clock(props) {
  return (
    <div>
      <h1>Hello, world!</h1>
      <h2>It is {props.date.toLocaleTimeString()}.</h2>
    </div>
  );
}

function tick() {
  ReactDOM.render(
    <Clock date={new Date()} />,
    document.getElementById('root')
  );
}

setInterval(tick, 1000);
```

**它忽略了一个关键的技术细节：`Clock` 组件需要设置一个计时器，并且需要每秒更新 UI。**

理想情况下，我们希望只编写一次代码，便可以让 `Clock` 组件自我更新：

```jsx
ReactDOM.render(
  <Clock />,  document.getElementById('root')
);
```

我们需要在 `Clock` 组件中添加 “state” 来实现这个功能。

State 与 props 类似，但是 state 是私有的，并且完全受控于当前组件。



##### 封装，用state实现

1. 将函数组件转换成 class 组件
2. 向 class 组件中添加局部的 state
3. 将生命周期方法添加到 Class 中



* **将函数组件转换成 class 组件**

  通过以下五步将 `Clock` 的函数组件转成 class 组件：

	1. 创建一个同名的 [ES6 class](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes)，并且继承于 `React.Component`。
	2. 添加一个空的 `render()` 方法。
	3. 将函数体移动到 `render()` 方法之中。
	4. 在 `render()` 方法中使用 `this.props` 替换 `props`。
	5. 删除剩余的空函数声明。

```jsx
class Clock extends React.Component {
  render() {
    return (
      <div>
        <h1>Hello, world!</h1>
        <h2>It is {this.props.date.toLocaleTimeString()}.</h2>
      </div>
    );
  }
}
```

现在 `Clock` 组件被定义为 class，而不是函数。

每次组件更新时 `render` 方法都会被调用，但只要在相同的 DOM 节点中渲染 `<Clock />` ，就仅有一个 `Clock` 组件的 **class 实例**被创建使用。这就使得我们**可以使用如 state 或生命周期方法**等很多其他特性。

*  **向 class 组件中添加局部的 state**

![image-20210203164530854](../../笔记/image/image-20210203164530854.png)



* **将生命周期方法添加到 Class 中**

当 `Clock` 组件第一次被渲染到 DOM 中的时候，就为其[设置一个计时器](https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval)。这在 React 中被称为“挂载（mount）”。

同时，当 DOM 中 `Clock` 组件被删除的时候，应该[清除计时器](https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval)。这在 React 中被称为“卸载（unmount）”。

为 class 组件声明一些特殊的方法，当组件挂载或卸载时就会去执行这些方法：

![image-20210203164857956](../../笔记/image/image-20210203164857956.png)

```jsx
componentDidMount() {
    this.timerID = setInterval(
      () => this.tick(),
      1000
    );
}

componentWillUnmount() {
    clearInterval(this.timerID);
}

tick() {
    this.setState({
      date: new Date()
    });
}

```

* 可使用

```jsx
#2
class Clock extends React.Component {
  constructor(props) {
    super(props);
    this.state = {date: new Date()};
  }

  componentDidMount() {
    this.timerID = setInterval(
      () => this.tick(),
      1000
    );
  }

  componentWillUnmount() {
    clearInterval(this.timerID);
  }

  tick() {
    this.setState({
      date: new Date()
    });
  }

  render() {
    return (
      <div>
        <h1>Hello, world!</h1>
        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
      </div>
    );
  }
}

ReactDOM.render(
  <Clock />,
  document.getElementById('root')
);
```

![image-20210203165345514](../../笔记/image/image-20210203165345514.png)



#### 正确的使用State

##### 不要直接修改 State

例如，此代码不会重新渲染组件：

```jsx
// Wrong
this.state.comment = 'Hello';
```

而是应该使用 `setState()`:

```jsx
// Correct
this.setState({comment: 'Hello'});
```

构造函数是唯	一可以给 `this.state` 赋值的地方：

```jsx
constructor(props) {
    super(props);
    this.state = {date: new Date()};
}
```

##### State 的更新可能是异步的

出于性能考虑，React 可能会把多个 `setState()` 调用合并成一个调用。

因为 `this.props` 和 `this.state` 可能会异步更新，所以你不要依赖他们的值来更新下一个状态。

![image-20210203165806261](../../笔记/image/image-20210203165806261.png)

##### State 的更新会被合并

当你调用 `setState()` 的时候，React 会把你提供的对象合并到当前的 state。

例如，你的 state 包含几个独立的变量：

```
  constructor(props) {
    super(props);
    this.state = {
      posts: [],      comments: []    };
  }
```

然后你可以分别调用 `setState()` 来单独地更新它们：

```
  componentDidMount() {
    fetchPosts().then(response => {
      this.setState({
        posts: response.posts      });
    });

    fetchComments().then(response => {
      this.setState({
        comments: response.comments      });
    });
  }
```

这里的合并是浅合并，所以 `this.setState({comments})` 完整保留了 `this.state.posts`， 但是完全替换了 `this.state.comments`。

##### 数据是向下流动的

不管是父组件或是子组件都无法知道某个组件是有状态的还是无状态的，并且它们也并不关心它是函数组件还是 class 组件。

这就是为什么称 state 为局部的或是封装的的原因。除了拥有并设置了它的组件，其他组件都无法访问。

组件可以选择把它的 state 作为 props 向下传递到它的子组件中：

```
<h2>It is {this.state.date.toLocaleTimeString()}.</h2>
```

这对于自定义组件同样适用：

```
<FormattedDate date={this.state.date} />
```

`FormattedDate` 组件会在其 props 中接收参数 `date`，但是组件本身无法知道它是来自于 `Clock` 的 state，或是 `Clock` 的 props，还是手动输入的：

```
function FormattedDate(props) {
  return <h2>It is {props.date.toLocaleTimeString()}.</h2>;
}
```



### 五、事件处理

![image-20210203171148403](../../笔记/image/image-20210203171148403.png)

![image-20210203171428787](../../笔记/image/image-20210203171428787.png)

#### `Toggle` 组件会渲染一个让用户切换开关状态的按钮

![image-20210203172021920](../../笔记/image/image-20210203172021920.png)

[不是很懂 有空再看看](https://react.docschina.org/docs/handling-events.html)

#### 复习 部分this指向

* **this**
  * **全局上下文**的this是window；**块级上下文**中没有自己的this，它的this是继承所在上下文中的this
  * [参考文档](https://blog.csdn.net/Dracolan/article/details/107581137)

* **箭头函数**的this指向在定义函数时就确定了
  
  * 函数体内的`this`对象，就是定义时所在的对象，而不是使用时所在的对象。
  * 箭头函数本身没有this，看上一层
  
* **回调函数**：this指向一般都是window

  * 特殊情况可以改变里面的this指向。（apply、call、bind）

  * 回调函数：把一个函数作为值传递给另一个函数，再在另一个函数中把这个函数执行

  * ```js
    class Cat {
     sayThis () {
        console.log(this); 		//指向window
      }
      sayThis2= ()=> {
        console.log(this); 		//指向上下文
      }
     exec (cb) {
        cb();		//this指向window
      }
    
     render () {
        this.exec(this.sayThis);	//指向Cat实例   结果为undefined
        this.exec(this.sayThis2);	//指向Cat实例	结果为Cat对象
      }
    }
    const cat = new Cat();
    cat.render(); 
    
    ```

  * 两种方法

    * bind
    * 使用箭头函数

#### 事件处理时为什么要手动绑定this?

> * 普通js函数中this的指向调用函数的对象
>   * 非严格模式下, this默认指向全局对象window
>   * 严格模式下, this为undefine

##### 基于此, 在react中为什么直接 `onClick={this.handleClick}` 不可以呢?

根本原因：是react中的dom是**虚拟dom**, JSX是`React.createElement(component, props, ...children)` 的语法糖, 在我们调用事件函数的时候其实这段代码

```jsx
render(){
    return (<a href="#" onClick={this.handleClick}>click me </a>
})

# 被解析成

render(){
   return React.createElement(
    "a", 
    { onClick: this.handleClick}, 
    "click me"
    );
}

```

这样的代码的, `onClick = {function}` 中的`onClick`本身就是一个"中间变量", `this.handleClick`又作为一个callback传给另一个函数, 这时候this就丢失了==丢失的是**handleClick处理函数里的this**，如果你不在handeCLick里使用this，也可不绑定，但是在react实际案例中，处理函数一般都会涉及使用this，因为state，props什么的都需要通过this==.举个简单例子

![image-20210204095625517](../../笔记/image/image-20210204095625517.png)



![image-20210204104502709](../../笔记/image/image-20210204104502709.png)



![image-20210204105352551](../../笔记/image/image-20210204105352551.png)



> **虚拟DOM是什么？**
>
> 说简单点，就是一个普通的 JavaScript 对象，包含了 `tag`、`props`、`children` 三个属性
>
> ```jsx
> <div id="app">
>   <p class="text">hello world!!!</p>
> </div>
> 
> # 虚拟DOM为：
> 
> {
>   tag: 'div',
>   props: {
>     id: 'app'
>   },
>   chidren: [
>     {
>       tag: 'p',
>       props: {
>         className: 'text'
>       },
>       chidren: [
>         'hello world!!!'
>       ]
>     }
>   ]
> }
> ```
>
> 
>
> 虚拟 DOM 提升性能：在于 DOM 发生变化的时候，通过 **diff 算法**比对 **JavaScript 原生对象**，计算出需要变更的 DOM，然后**只对变化的 DOM** 进行操作，而**不是更新整个视图**。
>
> [虚拟DOM参考](https://blog.csdn.net/weixin_33736649/article/details/93164830)

#### 事件处理绑定方法

* bind绑定

  ```jsx
  class Toggle extends React.Component {
    constructor(props) {
      super(props);
      this.state = {isToggleOn: true};
  
      // 为了在回调中使用 `this`，这个绑定是必不可少的
      this.handleClick = this.handleClick.bind(this);
    }
  
    handleClick() {
      this.setState(state => ({
        isToggleOn: !state.isToggleOn
      }));
    }
  
    render() {
      return (
        <button onClick={this.handleClick}>
          {this.state.isToggleOn ? 'ON' : 'OFF'}
        </button>
      );
    }
  }
  
  ReactDOM.render(
    <Toggle />,
    document.getElementById('root')
  );
  ```

* 回调函数

  ```jsx
  # 1
  class LoggingButton extends React.Component {
    // 此语法确保 `handleClick` 内的 `this` 已被绑定。
    // 注意: 这是 *实验性* 语法。
    handleClick = () => {
      console.log('this is:', this);
    }
  
    render() {
      return (
        <button onClick={this.handleClick}>
          Click me
        </button>
      );
    }
  }
  
  # 2
  class LoggingButton extends React.Component {
    handleClick() {
      console.log('this is:', this);
    }
  
    render() {
      // 此语法确保 `handleClick` 内的 `this` 已被绑定。
      return (
        <button onClick={() => this.handleClick()}>
          Click me
        </button>
      );
    }
  }
  
  ```



### 状态提升

[脑壳疼](https://react.docschina.org/docs/lifting-state-up.html)



### 组件

定义组件有两个要求：

1. 组件名称必须以大写字母开头
2. 组件的返回值只能有一个根元素

```js
无论是使用函数或是类来声明一个组件，它决不能修改它自己的 props。

所有 React 组件都必须是纯函数，并禁止修改其自身 props 。

React是单项数据流，父组件改变了属性，那么子组件视图会更新。

属性 props 是外界传递过来的，状态 state 是组件本身的，状态可以在组件中任意修改

组件的属性和状态改变都会更新视图。
```



#### 函数式组件

```js
import React from 'react'
import ReactDOM from 'react-dom'

// 特别注意这里的写法，如果要在JSX里写js表达式(只能是表达式，不能流程控制)，就需要加 {}，包括注释也是一样，并且可以多层嵌套
const app = (props) => <h1>欢迎进入{props.name}的世界</h1>

ReactDOM.render(
  app({
    name: 'react'
  }),
  document.getElementById('root')
)

```

```js
import React from 'react'
import ReactDOM from 'react-dom'

const App = (props) => <h1>欢迎进入{props.name}的世界</h1>

ReactDOM.render(
  // React组件的调用方式
  <App name="react" />,
  document.getElementById('root')
)

```

#### class组件

```js
import React from 'react'
import ReactDOM from 'react-dom'

class App extends React.Component {
  render () {
    return (
      // 注意这里得用this.props.name, 必须用this.props
      <h1>欢迎进入{this.props.name}的世界</h1>
  	)
  }
}
ReactDOM.render(
  <App name="react" />,
  document.getElementById('root')
)

```

#### 函数组件与类组件的区别

​	**函数组件的性能比类组件的性能要高**，因为类组件使用的时候要**实例化**，而函数组件直接**执行函数**取返回结果即可。为了提高性能，尽量使用函数组件。

![image-20210203134909250](../../笔记/image/image-20210203134909250.png)

## 笔记

[很多...](https://blog.csdn.net/weixin_40629244/article/details/87921208)

[实战项目](https://blog.csdn.net/liuyangjike/article/details/83856326)	

[react学习参考文档](https://react.docschina.org/docs/lifting-state-up.html)

[一个完整react项目的目录结构](https://blog.csdn.net/zhengming0929/article/details/85256046)

[React + TypeScript](https://blog.csdn.net/weixin_45895753/article/details/108519856)